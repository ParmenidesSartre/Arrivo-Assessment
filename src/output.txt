
File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\config\config.js
Content:
const dotenv = require('dotenv');

// Load environment variables from .env file
dotenv.config();

// Define a schema for verification
const schema = {
  DB_USER: '',
  DB_HOST: '',
  DB_NAME: '',
  DB_PASSWORD: '',
  DB_PORT: '',
  JWT_SECRET: '',
};

// Verify that all required environment variables are defined
for (const key in schema) {
  if (!process.env[key]) {
    throw new Error(`Environment variable ${key} is not defined`);
  }

  schema[key] = process.env[key];
}

module.exports = schema;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\config\database.js
Content:
const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool({
  user: config.DB_USER,
  host: config.DB_HOST,
  database: config.DB_NAME,
  password: config.DB_PASSWORD,
  port: config.DB_PORT,
  ssl: true,
});

module.exports = pool;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\controllers\category.controller.js
Content:
const {
  addCategory,
  getAllCategories,
  getCategoryById,
  updateCategory,
  deleteCategory,
} = require('../models/category.model');

const getAllCategoriesController = async (req, res) => {
  try {
    const categories = await getAllCategories();
    res.status(200).json({
      success: true,
      data: categories,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const addCategoryController = async (req, res) => {
  try {
    const category = await addCategory(req.body);
    res.status(201).json({
      success: true,
      data: category,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const getCategoryByIdController = async (req, res) => {
  try {
    const category = await getCategoryById(req.params.id);
    if (!category) {
      return res.status(404).json({
        success: false,
        message: 'Category not found',
      });
    }
    res.status(200).json({
      success: true,
      data: category,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const updateCategoryController = async (req, res) => {
  try {
    const category = await updateCategory(
      req.params.id,
      req.body.column,
      req.body.value
    );
    res.status(200).json({
      success: true,
      data: category,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const deleteCategoryController = async (req, res) => {
  try {
    await deleteCategory(req.params.id);
    res.status(204).json({});
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

module.exports = {
  getAllCategoriesController,
  addCategoryController,
  getCategoryByIdController,
  updateCategoryController,
  deleteCategoryController,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\controllers\post.controller.js
Content:
const {
  addPost,
  getAllPosts,
  getPostById,
  updatePost,
  deletePost,
  getPostsByLabelAndStatus,
} = require('../models/post.model');

const getAllPostsController = async (req, res) => {
  try {
    const posts = await getAllPosts();
    res.status(200).json({
      success: true,
      data: posts,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const getAllPostsByLabelAndStatusController = async (req, res) => {
  try {
    let posts;
    if (req.user.membership === 'Premium') {
      // Fetch both premium and normal posts for premium users
      posts = await getPostsByLabelAndStatus(
        ['Premium', 'Normal'],
        'Published'
      );
    } else {
      // Fetch only normal posts for normal users
      posts = await getPostsByLabelAndStatus('Normal', 'Published');
    }

    res.status(200).json({
      success: true,
      data: posts,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const addPostController = async (req, res) => {
  try {
    const post = await addPost(req.body);
    res.status(201).json({
      success: true,
      data: post,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const getPostByIdController = async (req, res) => {
  try {
    const post = await getPostById(req.params.id);
    if (!post) {
      return res.status(404).json({
        success: false,
        message: 'Post not found',
      });
    }
    res.status(200).json({
      success: true,
      data: post,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const updatePostController = async (req, res) => {
  try {
    const post = await updatePost(
      req.params.id,
      req.body.column,
      req.body.value
    );
    res.status(200).json({
      success: true,
      data: post,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const deletePostController = async (req, res) => {
  try {
    await deletePost(req.params.id);
    res.status(204).json({});
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

module.exports = {
  getAllPostsController,
  addPostController,
  getPostByIdController,
  updatePostController,
  deletePostController,
  getAllPostsByLabelAndStatusController,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\controllers\user.controller.js
Content:
const {
  addUser,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser,
  getUserByEmail,
} = require('../models/user.model');
const { signToken } = require('../utils/jwt.utils');
const { hashPassword, comparePassword } = require('../utils/hash.utils');
const { removePassword, removePasswords } = require('../utils/utils');

const loginUserController = async (req, res) => {
  try {
    const user = await getUserByEmail(req.body.email);

    // Check if user exists
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found',
      });
    }

    // Check if password is correct
    const isPasswordCorrect = await comparePassword(
      req.body.password,
      user.password
    );
    if (!isPasswordCorrect) {
      return res.status(401).json({
        success: false,
        message: 'Incorrect password',
      });
    }

    // Generate a token
    const token = signToken({ id: user.id });

    // Remove password from user object
    const sanitizedUser = removePassword(user);

    res.status(200).json({
      success: true,
      data: { ...sanitizedUser, token },
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const addUserController = async (req, res) => {
  try {
    // Hash the password
    const hashedPassword = await hashPassword(req.body.password);
    const user = await addUser({ ...req.body, password: hashedPassword });

    // Generate a token
    const token = signToken({ id: user.id });

    // Remove password from user object
    const sanitizedUser = removePassword(user);

    res.status(201).json({
      success: true,
      data: { ...sanitizedUser, token },
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const getAllUsersController = async (req, res) => {
  try {
    const users = await getAllUsers();

    // Remove password from user objects
    const sanitizedUsers = removePasswords(users);
    res.status(200).json({
      success: true,
      data: sanitizedUsers,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const getUserByIdController = async (req, res) => {
  try {
    const user = await getUserById(req.params.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found',
      });
    }

    // Remove password from user object
    const sanitizedUser = removePassword(user);

    res.status(200).json({
      success: true,
      data: sanitizedUser,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const updateUserController = async (req, res) => {
  console.log(req.body.keys());
  try {
    const user = await updateUser(
      req.params.id,
      req.body.membership,
      req.body.value
    );

    // Remove password from user object
    const sanitizedUser = removePassword(user);

    res.status(200).json({
      success: true,
      data: sanitizedUser,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

const deleteUserController = async (req, res) => {
  try {
    await deleteUser(req.params.id);

    res.status(204).json({});
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

module.exports = {
  loginUserController,
  getAllUsersController,
  addUserController,
  getUserByIdController,
  updateUserController,
  deleteUserController,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\index.js
Content:
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const routes = require('./routes');
const initDb = require('./models/initDb');

const app = express();

initDb()
  .then(() => {
    console.log('Database initialized');
  })
  .catch((err) => {
    console.log(err);
  });

app.use(bodyParser.json());
app.use(cors());

app.use('/api/v1', routes);

app.use('/', (req, res) => {
  res.send('Hello World!');
});

const PORT = 3000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\middlewares\auth.middleware.js
Content:
const { verifyToken } = require('../utils/jwt.utils');
const { getUserById } = require('../models/user.model');

const authenticate = async (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ msg: 'No token, authorization denied' });
  }

  const decoded = verifyToken(token.split(' ')[1]);

  if (decoded) {
    const user = await getUserById(decoded.id);

    req.user = user;
    next();
  } else {
    res.status(401).json({ msg: 'Token is not valid' });
  }
};

module.exports = authenticate;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\middlewares\validation.middleware.js
Content:
const validationMiddleware = (schemas) => {
  return (req, res, next) => {
    for (const key in schemas) {
      const { error } = schemas[key].validate(req[key]);

      if (error) {
        return res.status(400).json({
          success: false,
          message: error.details[0].message,
        });
      }
    }

    next();
  };
};

module.exports = validationMiddleware;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\models\category.model.js
Content:
const pool = require('../config/database');

exports.getAllCategories = async () => {
  try {
    const categories = await pool.query('SELECT * FROM categories');
    return categories.rows;
  } catch (error) {
    throw error;
  }
};

exports.addCategory = async (category) => {
  try {
    const { name, description, activated } = category;
    const result = await pool.query(
      'INSERT INTO categories (name, description, activated, created_at, updated_at) VALUES ($1, $2, $3, now(), now()) RETURNING *',
      [name, description, activated]
    );
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.getCategoryById = async (id) => {
  try {
    const result = await pool.query('SELECT * FROM categories WHERE id = $1', [
      id,
    ]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.updateCategory = async (id, column, value) => {
  try {
    const query = `UPDATE categories SET ${column} = $1, updated_at = now() WHERE id = $2 RETURNING *`;
    const values = [value, id];

    const result = await pool.query(query, values);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.deleteCategory = async (id) => {
  try {
    const result = await pool.query('DELETE FROM categories WHERE id = $1', [
      id,
    ]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\models\initDb.js
Content:
const pool = require('../config/database');
const { hashPassword } = require('../utils/hash.utils');

const dropTableIfExists = async (tableName) => {
  const query = `DROP TABLE IF EXISTS ${tableName} CASCADE;`;
  await pool.query(query);
};

const createUsersTable = async () => {
  const query = `CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    fullName VARCHAR(255),
    membership VARCHAR(255) DEFAULT 'Normal',
    createdAt TIMESTAMP NOT NULL DEFAULT NOW(),
    updatedAt TIMESTAMP NOT NULL DEFAULT NOW()
  );`;
  await pool.query(query);
};

const createCategoriesTable = async () => {
  const query = `CREATE TABLE IF NOT EXISTS categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    activated BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
  );`;
  await pool.query(query);
};

const createPostsTable = async () => {
  const query = `CREATE TABLE IF NOT EXISTS posts (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    category_id INTEGER REFERENCES categories(id),
    status VARCHAR(50) DEFAULT 'Draft',
    label VARCHAR(50) DEFAULT 'Normal',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
  );`;
  await pool.query(query);
};

const createPaymentsTable = async () => {
  const query = `CREATE TABLE IF NOT EXISTS payments (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    payment_id VARCHAR(255) NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(50),
    status VARCHAR(50),
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
  );`;
  await pool.query(query);
};

const seedAdminAccount = async () => {
  const hashedPassword = await hashPassword('admin1234');
  const query = `
    INSERT INTO users (username, password, email, fullName, membership, createdAt, updatedAt)
    VALUES ('admin', $1, 'admin@example.com', 'Admin User', 'Admin', NOW(), NOW());
  `;
  await pool.query(query, [hashedPassword]);
};

const seedCategories = async () => {
  const categories = [
    {
      name: 'Technology',
      description: 'The latest technology news and trends',
    },
    {
      name: 'Travel',
      description: 'Explore the world with travel guides and tips',
    },
    {
      name: 'Food',
      description: 'Discover delicious recipes and food recommendations',
    },
    {
      name: 'Fitness',
      description: 'Stay fit and healthy with workout guides and tips',
    },
    {
      name: 'Fashion',
      description: 'Get inspired with the latest fashion trends and styles',
    },
  ];

  const query = `
    INSERT INTO categories (name, description, created_at, updated_at)
    VALUES ($1, $2, NOW(), NOW())
  `;

  for (const category of categories) {
    await pool.query(query, [category.name, category.description]);
  }
};

const seedPosts = async () => {
  const posts = [
    {
      title: 'The Future of Artificial Intelligence',
      body: 'Learn about the advancements and potential of AI in various industries.',
      categoryId: 1, // Technology category
    },
    {
      title: 'Top Travel Destinations in 2023',
      body: 'Explore the most popular travel destinations for your next vacation.',
      categoryId: 2, // Travel category
    },
    {
      title: 'Delicious Pasta Recipes for Pasta Lovers',
      body: 'Try these mouthwatering pasta recipes that are easy to make at home.',
      categoryId: 3, // Food category
    },
    {
      title: 'Effective Workout Tips for Building Muscles',
      body: 'Discover the best workout techniques for gaining muscle mass and strength.',
      categoryId: 4, // Fitness category
    },
    {
      title: 'Latest Fashion Trends for the Spring Season',
      body: 'Stay stylish with these trendy fashion tips and outfit ideas for spring.',
      categoryId: 5, // Fashion category
    },
  ];

  const query = `
    INSERT INTO posts (title, body, category_id, created_at, updated_at)
    VALUES ($1, $2, $3, NOW(), NOW())
  `;

  for (const post of posts) {
    await pool.query(query, [post.title, post.body, post.categoryId]);
  }
};

const initDb = async () => {
  try {
    await dropTableIfExists('payments');
    await dropTableIfExists('posts');
    await dropTableIfExists('categories');
    await dropTableIfExists('users');

    await createUsersTable();
    await createCategoriesTable();
    await createPostsTable();
    await createPaymentsTable();

    await seedAdminAccount();
    await seedCategories();
    await seedPosts();

    console.log('Database initialized successfully.');
  } catch (error) {
    console.error('Error initializing database:', error);
  }
};

module.exports = initDb;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\models\post.model.js
Content:
const pool = require('../config/database');

// Get all posts
exports.getAllPosts = async () => {
  try {
    const posts = await pool.query(
      'SELECT posts.*, categories.name AS category_name FROM posts INNER JOIN categories ON posts.category_id = categories.id'
    );
    return posts.rows;
  } catch (error) {
    throw error;
  }
};

// Add a new post
exports.addPost = async (post) => {
  try {
    const { title, body, category_id, status, label } = post;
    const result = await pool.query(
      'INSERT INTO posts (title, body, category_id, status, label, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, NOW(), NOW()) RETURNING *',
      [title, body, category_id, status, label]
    );
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

// Get a post by id
exports.getPostById = async (id) => {
  try {
    const result = await pool.query(
      'SELECT posts.*, categories.name AS category_name FROM posts INNER JOIN categories ON posts.category_id = categories.id WHERE posts.id = $1',
      [id]
    );
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.getPostsByLabelAndStatus = async (labels, status) => {
  try {
    let query;
    let values;

    if (Array.isArray(labels)) {
      // If labels is an array, generate a dynamic IN clause
      const placeholders = labels.map((_, index) => `$${index + 1}`).join(',');
      query = `SELECT posts.*, categories.name AS category_name FROM posts INNER JOIN categories ON posts.category_id = categories.id WHERE posts.label IN (${placeholders}) AND posts.status = $${
        labels.length + 1
      }`;
      values = [...labels, status];
    } else {
      // If labels is a single value
      query =
        'SELECT posts.*, categories.name AS category_name FROM posts INNER JOIN categories ON posts.category_id = categories.id WHERE posts.label = $1 AND posts.status = $2';
      values = [labels, status];
    }

    const result = await pool.query(query, values);
    return result.rows;
  } catch (err) {
    throw err;
  }
};

// Update a post
exports.updatePost = async (id, column, value) => {
  try {
    const query = `UPDATE posts SET ${column} = $1, updated_at = NOW() WHERE id = $2 RETURNING *`;
    const values = [value, id];
    const result = await pool.query(query, values);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

// Delete a post
exports.deletePost = async (id) => {
  try {
    const result = await pool.query('DELETE FROM posts WHERE id = $1', [id]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\models\user.model.js
Content:
const pool = require('../config/database');

// Get all users
exports.getAllUsers = async () => {
  try {
    const users = await pool.query('SELECT * FROM users');
    return users.rows;
  } catch (error) {
    throw error;
  }
};

exports.addUser = async (user) => {
  try {
    const { username, password, email, fullName, membership } = user;
    const result = await pool.query(
      'INSERT INTO users (username, password, email, fullName, membership, createdAt, updatedAt) VALUES ($1, $2, $3, $4, $5, now(), now()) RETURNING *',
      [username, password, email, fullName, membership]
    );
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.getUserById = async (id) => {
  try {
    const result = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.getUserByEmail = async (email) => {
  try {
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [
      email,
    ]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.updateUser = async (id, column, value) => {
  try {
    const query = `UPDATE users SET ${column} = $1, updatedAt = now() WHERE id = $2 RETURNING *`;
    const values = [value, id];

    const result = await pool.query(query, values);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};

exports.deleteUser = async (id) => {
  try {
    const result = await pool.query('DELETE FROM users WHERE id = $1', [id]);
    return result.rows[0];
  } catch (err) {
    throw err;
  }
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\routes\category.routes.js
Content:
const router = require('express').Router();
const categoryController = require('../controllers/category.controller');
const authenticate = require('../middlewares/auth.middleware');
const validationMiddleware = require('../middlewares/validation.middleware');
const categoryValidation = require('../validations/category.validation');

router
  .route('/')
  .get(authenticate, categoryController.getAllCategoriesController)
  .post(
    authenticate,
    validationMiddleware(categoryValidation.createCategory),
    categoryController.addCategoryController
  );
router
  .route('/:id')
  .get(
    authenticate,
    validationMiddleware(categoryValidation.getCategory),
    categoryController.getCategoryByIdController
  )
  .patch(
    authenticate,
    validationMiddleware(categoryValidation.updateCategory),
    categoryController.updateCategoryController
  )
  .delete(
    authenticate,
    validationMiddleware(categoryValidation.deleteCategory),
    categoryController.deleteCategoryController
  );

module.exports = router;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\routes\index.js
Content:
const router = require('express').Router();

const userRoutes = require('./user.routes');
const categoryRoutes = require('./category.routes');
const postRoutes = require('./post.routes');

const defaultRoutes = [
  {
    path: '/users',
    route: userRoutes,
  },
  {
    path: '/categories',
    route: categoryRoutes,
  },
  {
    path: '/posts',
    route: postRoutes,
  },
];

defaultRoutes.forEach((route) => {
  router.use(route.path, route.route);
});

module.exports = router;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\routes\payment.routes.js
Content:


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\routes\post.routes.js
Content:
const router = require('express').Router();
const postController = require('../controllers/post.controller');
const authenticate = require('../middlewares/auth.middleware');
const validationMiddleware = require('../middlewares/validation.middleware');
const postValidation = require('../validations/post.validation');

router
  .route('/')
  .get(authenticate, postController.getAllPostsController)
  .post(
    authenticate,
    validationMiddleware(postValidation.createPost),
    postController.addPostController
  );

router
  .route('/all')
  .get(authenticate, postController.getAllPostsByLabelAndStatusController);
router
  .route('/:id')
  .get(
    authenticate,
    validationMiddleware(postValidation.getPost),
    postController.getPostByIdController
  )
  .patch(
    authenticate,
    validationMiddleware(postValidation.updatePost),
    postController.updatePostController
  )
  .delete(
    authenticate,
    validationMiddleware(postValidation.deletePost),
    postController.deletePostController
  );

module.exports = router;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\routes\user.routes.js
Content:
const router = require('express').Router();
const userController = require('../controllers/user.controller');
const authenticate = require('../middlewares/auth.middleware');
const validationMiddleware = require('../middlewares/validation.middleware');
const userValidation = require('../validations/user.validation');

router.route('/login').post(userController.loginUserController);

router
  .route('/')
  .get(authenticate, userController.getAllUsersController)
  .post(
    validationMiddleware(userValidation.createUser),
    userController.addUserController
  );
router
  .route('/:id')
  .get(
    authenticate,
    validationMiddleware(userValidation.getUser),
    userController.getUserByIdController
  )
  .patch(
    authenticate,
    validationMiddleware(userValidation.updateUser),
    userController.updateUserController
  )
  .delete(
    authenticate,
    validationMiddleware(userValidation.deleteUser),
    userController.deleteUserController
  );

module.exports = router;


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\traversal.js
Content:
const fs = require('fs');
const path = require('path');

// Recursive function to traverse directories
function traverseDir(dir, callback) {
  fs.readdirSync(dir).forEach((file) => {
    let fullPath = path.join(dir, file);

    if (fs.statSync(fullPath).isDirectory()) {
      traverseDir(fullPath, callback);
    } else {
      callback(fullPath);
    }
  });
}

// Output file
let outputFile = path.join(__dirname, 'output.txt');

// Clear output file before start
fs.writeFileSync(outputFile, '', 'utf8');

traverseDir(__dirname, (filepath) => {
  // Ignore output.txt file itself
  if (filepath === outputFile) return;

  let fileContent = fs.readFileSync(filepath, 'utf8');
  let formattedContent = `\nFile: ${filepath}\nContent:\n${fileContent}\n`;
  fs.appendFileSync(outputFile, formattedContent, 'utf8');
});


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\utils\hash.utils.js
Content:
const bcrypt = require('bcrypt');

const hashPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);
  return hashedPassword;
};

const comparePassword = async (password, hashedPassword) => {
  return await bcrypt.compare(password, hashedPassword);
};

module.exports = {
  hashPassword,
  comparePassword,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\utils\jwt.utils.js
Content:
const jwt = require('jsonwebtoken');
const config = require('../config/config');

const signToken = (payload) => {
  return jwt.sign(payload, config.JWT_SECRET, { expiresIn: '1h' });
};

const verifyToken = (token) => {
  try {
    return jwt.verify(token, config.JWT_SECRET);
  } catch (err) {
    return null;
  }
};

module.exports = {
  signToken,
  verifyToken,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\utils\utils.js
Content:
const removePassword = (userObject) => {
  const { password, ...result } = userObject;
  return result;
};

const removePasswords = (userObjects) => {
  return userObjects.map(removePassword);
};

module.exports = {
  removePassword,
  removePasswords,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\validations\category.validation.js
Content:
const Joi = require('@hapi/joi');

const createCategory = {
  body: Joi.object().keys({
    name: Joi.string().min(3).max(50).required(),
    description: Joi.string().max(255),
    activated: Joi.boolean().required(),
  }),
};

const getCategories = {
  query: Joi.object().keys({
    name: Joi.string(),
    activated: Joi.boolean(),
  }),
};

const getCategory = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
};

const updateCategory = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
  body: Joi.object().keys({
    name: Joi.string().min(3).max(50),
    description: Joi.string().max(255),
    activated: Joi.boolean(),
  }),
};

const deleteCategory = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
};

module.exports = {
  createCategory,
  getCategories,
  getCategory,
  updateCategory,
  deleteCategory,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\validations\post.validation.js
Content:
const Joi = require('@hapi/joi');

const createPost = {
  body: Joi.object().keys({
    title: Joi.string().min(3).max(100).required(),
    body: Joi.string().required(),
    category_id: Joi.number().integer().required(),
    status: Joi.string()
      .valid('Draft', 'Published', 'Pending Review')
      .required(),
    label: Joi.string().max(50),
  }),
};

const getPosts = {
  query: Joi.object().keys({
    title: Joi.string(),
    status: Joi.string().valid('Draft', 'Published', 'Pending Review'),
    category_id: Joi.number().integer(),
  }),
};

const getPost = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
};

const updatePost = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
  body: Joi.object().keys({
    title: Joi.string().min(3).max(100),
    body: Joi.string(),
    category_id: Joi.number().integer(),
    status: Joi.string().valid('Draft', 'Published'),
    label: Joi.string().max(50),
  }),
};

const deletePost = {
  params: Joi.object().keys({
    id: Joi.number().integer().required(),
  }),
};

module.exports = {
  createPost,
  getPosts,
  getPost,
  updatePost,
  deletePost,
};


File: C:\Users\Acer\OneDrive\Desktop\Arrivo\src\validations\user.validation.js
Content:
const Joi = require('@hapi/joi');

const createUser = {
  body: Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string()
      .pattern(new RegExp('^[a-zA-Z0-9]{3,30}$'))
      .required(),
    email: Joi.string().email().required(),
    fullName: Joi.string().min(3).max(50).required(),
    membership: Joi.string().valid('Normal', 'Premium').required(),
  }),
};

const getUsers = {
  query: Joi.object().keys({
    username: Joi.string(),
    email: Joi.string().email(),
    fullName: Joi.string(),
    membership: Joi.string().valid('Normal', 'Premium'),
  }),
};

const getUser = {
  params: Joi.object().keys({
    id: Joi.number().integer(),
  }),
};

const updateUser = {
  params: Joi.object().keys({
    id: Joi.required(),
  }),
  body: Joi.object()
    .keys({
      username: Joi.string().alphanum().min(3).max(30),
      password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')),
      email: Joi.string().email(),
      fullName: Joi.string().min(3).max(50),
      membership: Joi.string().valid('Normal', 'Premium'),
    })
    .min(1),
};

const deleteUser = {
  params: Joi.object().keys({
    id: Joi.number().integer(),
  }),
};

module.exports = {
  createUser,
  getUsers,
  getUser,
  updateUser,
  deleteUser,
};

